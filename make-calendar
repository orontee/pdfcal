#!/usr/bin/env python3

"""Generate calendar in PDF format."""

from fpdf import FPDF
import datetime
import locale
from icalendar import Calendar
from ical2csv import process_ical
import argparse
from typing import Any, Dict, List

FONT = "dejavu"

# close to a4 sizes in mm, but matching the remarkable 2
PAGE_WIDTH = 210
PAGE_HEIGTH = 280

# clear the remarkable tool bar
LEFT_MARGIN = 20


def initialize_document(year: int) -> FPDF:
    pdf = FPDF(
        orientation="portrait",
        unit="mm",
        format=(PAGE_WIDTH, PAGE_HEIGTH),
    )
    pdf.set_margins(0, 0)
    pdf.set_auto_page_break(False)
    pdf.set_title("Agenda for %04d" % (year))
    pdf.set_author("pdfcal")
    pdf.add_font(FONT, "", fname="fonts/DejaVuSansCondensed.ttf")
    pdf.add_font(FONT, "B", fname="fonts/DejaVuSansCondensed-Bold.ttf")

    return pdf


locale.setlocale(locale.LC_ALL, "")
# propagate OS locale

DAYS: List[str] = []
FULLDAYS: List[str] = []

for abdayid, dayid in (
    (locale.ABDAY_2, locale.DAY_2),
    (locale.ABDAY_3, locale.DAY_3),
    (locale.ABDAY_4, locale.DAY_4),
    (locale.ABDAY_5, locale.DAY_5),
    (locale.ABDAY_6, locale.DAY_6),
    (locale.ABDAY_7, locale.DAY_7),
    (locale.ABDAY_1, locale.DAY_1),
):
    DAYS.append(locale.nl_langinfo(abdayid))
    FULLDAYS.append(locale.nl_langinfo(dayid))

MONTHS: List[str] = [
    "None",
]

for monthid in (
    locale.MON_1,
    locale.MON_2,
    locale.MON_3,
    locale.MON_4,
    locale.MON_5,
    locale.MON_6,
    locale.MON_7,
    locale.MON_8,
    locale.MON_9,
    locale.MON_10,
    locale.MON_11,
    locale.MON_12,
):
    MONTHS.append(locale.nl_langinfo(monthid))


def collect_ical_events(year: int) -> Dict[str, Dict[str, Any]]:
    entries: Dict[str, Dict[str, Any]] = {}

    for filename in args["cal"]:
        with open(filename, "r") as f:
            print(f"processing iCal {filename}")
            cal = Calendar.from_ical(f.read())
            process_ical(year, cal, entries)

    return entries


def insert_calendar(
    pdf,
    year,
    mon,
    highlight,
    size,
    x,
    y,
    links: Dict[str, int],
    entries: Dict[str, Dict[str, Any]],
    day_font=None,
    border=False,
    include_year=False,  # true == full page overview of the month
    ysize=None,
):
    if not ysize:
        ysize = size
    if not day_font:
        day_font = size * 1.8

    pdf.set_font(FONT, "B", 2 * size)
    pdf.set_text_color(255)
    pdf.set_fill_color(40)

    if include_year:
        header = "%s %04d" % (MONTHS[mon], year)
        link = links["%04d" % (year)]
    else:
        header = MONTHS[mon]
        link = links["%04d-%02d" % (year, mon)]

    pdf.set_xy(x, y)
    pdf.cell(w=7 * size, h=1.5 * size, text=header, align="C", fill=True, link=link)
    y += size * 1.5

    # draw the days of the week above the table
    pdf.set_fill_color(180)
    pdf.set_font(FONT, "", size)
    for weekday in range(0, 7):
        pdf.set_xy(x + weekday * size, y)
        pdf.cell(
            h=size * 0.5,
            w=size,
            text=DAYS[weekday],
            fill=True,
            align="C",
        )

    week = 0
    y += size * 0.5

    # draw the table for days of the month
    pdf.set_text_color(0)

    for day in range(1, 31 + 1):
        try:
            date = datetime.date(year, mon, day)
        except Exception:
            continue

        weekday = date.weekday()
        ymd = "%04d-%02d-%02d" % (year, mon, day)
        link = links[ymd]

        if weekday == 0 and day != 1:
            week += 1

        day_x = x + weekday * size
        day_y = y + week * ysize

        if border:
            pdf.rect(day_x, day_y, size, ysize)
        if day == highlight:
            pdf.rect(day_x, day_y, size, ysize, style="F")

        pdf.set_xy(day_x, day_y)
        pdf.set_font(FONT, "", day_font)
        pdf.cell(
            w=size,
            h=day_font / 2 + 1.5,
            text="%d" % (day),
            align="R",
            link=link,
            # fill = day == highlight,
            # border = border,
        )

        if not border:
            continue
        if not (events := entries.get(ymd)):
            continue

        pdf.set_font(FONT, "", day_font * 0.8)
        all_day = ""
        for hms, evs in sorted(events.items()):
            for ev in evs:
                if hms != "00:00" or ev[0] != 0:
                    # not an all day event
                    continue
                all_day += ev[1] + "\n"
        if all_day:
            pdf.set_xy(day_x + 1, day_y + day_font / 2 + 2)
            pdf.multi_cell(
                w=size,
                h=day_font / 3,
                text=all_day,
                align="L",
            )


def add_day_page(
    pdf: FPDF,
    year: int,
    mon: int,
    day: int,
    links: Dict[str, int], *,
    time_block_line_width: int,
    time_block_line_color: int,
):
    try:
        date = datetime.date(year, mon, day)
    except Exception:
        return

    ymd = "%04d-%02d-%02d" % (year, mon, day)
    pdf.add_page()
    pdf.set_link(links[ymd])

    start_h = 8
    cal_size = 8
    date_y = 0
    cal_w = 7 * cal_size
    cal_h = 8 * cal_size
    cal_y = 50
    cal_x = PAGE_WIDTH - cal_w - 4

    insert_calendar(
        pdf,
        year,
        mon,
        day,
        cal_size,
        cal_x,
        cal_y,
        links,
        entries,
        include_year=True,
        ysize=cal_size - 0.0,
    )

    if mon > 1:
        insert_calendar(
            pdf, year, mon - 1, -1, cal_size * 0.5, cal_x, cal_y + cal_h, links, entries
        )
    if mon < 12:
        insert_calendar(
            pdf,
            year,
            mon + 1,
            -1,
            cal_size * 0.5,
            cal_x + cal_w / 2,
            cal_y + cal_h,
            links,
            entries,
        )

    # big date and day of week
    pdf.set_font(FONT, "B", 125)
    pdf.set_xy(cal_x, date_y + 8)
    pdf.cell(
        text="%d" % (day),
        align="C",
        w=cal_w,
        h=50,
        link=str(links["%04d-%02d" % (year, mon)]),
    )

    pdf.set_font(FONT, "B", 26)
    pdf.set_xy(cal_x, date_y)
    pdf.cell(
        text=FULLDAYS[date.weekday()],
        w=cal_w,
        h=15,
        align="C",
        link=str(links["%04d" % (year)],)
    )

    # add the time blocks
    pdf.set_draw_color(time_block_line_color)
    pdf.set_line_width(time_block_line_width)
    pdf.set_fill_color(240)
    pdf.set_text_color(40)
    pdf.set_font(FONT, "B", 16)

    hour_h = PAGE_HEIGTH / 30
    for i in range(1, 30):
        line_y = i * hour_h
        # if i < 7:
        line_x = cal_x - 8
        # else:
        # 	line_x = w * 0.6 - 2.5
        pdf.line(LEFT_MARGIN, line_y, line_x, line_y)

        if i % 2 != 0:
            continue
        pdf.set_xy(LEFT_MARGIN, line_y - 0)
        pdf.cell(
            w=hour_h,
            h=hour_h,
            text="%02d" % (i // 2 + start_h),
            align="C",
        )
        pdf.rect(LEFT_MARGIN, line_y, hour_h, hour_h)

    # add the todo blocks
    todo_h = hour_h + 1.5
    for i in range(0, 13):
        line_y = i * todo_h + cal_y + cal_h * 1.5 + todo_h
        line_x = cal_x - 4
        pdf.line(line_x, line_y, PAGE_WIDTH, line_y)
        pdf.rect(line_x, line_y - todo_h / 2, todo_h / 2, todo_h / 2)

    # add prepopulated entries if there are any
    if not (events := entries.get(ymd)):
        return

    all_day = ""

    pdf.set_font(FONT, "", 10)
    ev_x_base = LEFT_MARGIN + hour_h + 2
    ev_w = (line_x - ev_x_base - 10) / 2

    # support up to three overlapping events
    tracks = [0, 0, 0]

    for hms, evs in sorted(events.items()):
        for ev in evs:
            if hms == "00:00" and ev[0] == 0:
                # this is an all day event
                # print("adding", ev)
                all_day += ev[1] + "\n"
                continue
            # time bounded; if it is less than the earliest time,
            # draw it at the start time.
            ev_hour, ev_min = [int(_) for _ in hms.split(":")]

            if ev_hour < start_h:
                ev_hour = start_h
                ev_min = 0
            if ev_hour > start_h + 15:
                ev_hour = start_h + 15
                ev_min = 0

            ev_y = hour_h * (ev_hour * 2 + ev_min / 30 - start_h * 2)
            ev_h = (ev[0] / 1800) * hour_h

            # find the first track that this event fits in
            for indent in range(0, len(tracks)):
                if ev_y < tracks[indent]:
                    continue
                tracks[indent] = ev_y + ev_h
                ev_x = ev_x_base + (ev_w + 2) * indent
                break

            pdf.rect(
                ev_x,
                ev_y,
                ev_w,
                ev_h,
                style="F",
            )

            pdf.set_xy(ev_x, ev_y)
            pdf.multi_cell(w=ev_w, h=10 / 2, align="L", text=hms + ": " + ev[1])

    if all_day:
        pdf.set_font(FONT, "B", 16)
        pdf.set_xy(LEFT_MARGIN, 0)
        pdf.multi_cell(
            w=line_x - LEFT_MARGIN,
            h=hour_h / 2,
            text=all_day,
            align="C",
        )


def generate_links(pdf: FPDF) -> Dict[str, int]:
    """Create links for every day and month.

    Also create title page.
    """
    pdf.add_page()

    links: Dict[str, int] = {}
    links["%04d" % (year)] = pdf.add_link()
    for mon in range(1, 12 + 1):
        # month overview page
        links["%04d-%02d" % (year, mon)] = pdf.add_link()

        for day in range(1, 31 + 1):
            links["%04d-%02d-%02d" % (year, mon, day)] = pdf.add_link()

    pdf.set_font(FONT, "B", 40)
    pdf.set_xy(0, 0)
    pdf.cell(text="%04d" % (year), align="C", w=PAGE_WIDTH, h=20)
    pdf.set_link(links["%04d" % (year)])

    return links


def add_month_pages(
    pdf: FPDF, links: Dict[str, int], entries: Dict[str, Dict[str, Any]]
):
    for mon in range(0, 12):
        xsize = 9 * 7
        ysize = 9 * 7
        insert_calendar(
            pdf,
            year,
            mon + 1,
            -1,
            8,
            (mon % 3) * xsize + LEFT_MARGIN,
            (mon // 3) * ysize + 20,
            links,
            entries,
            ysize=8,
        )


def get_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        description=__doc__,
    )
    parser.add_argument(
        "-o", "--output", help="output file", required=False
    )
    parser.add_argument(
        "-y",
        "--year",
        help="year to generate (default to current year)",
        required=False,
        type=int,
        default=datetime.datetime.now().year,
    )
    parser.add_argument(
        "-w",
        "--linewidth",
        help="width of time block lines",
        required=False,
        type=float,
        default=0.1,
    )
    parser.add_argument(
        "-c",
        "--linecolor",
        help="color of time block lines (higher is lighter)",
        required=False,
        type=float,
        default=200,
    )
    parser.add_argument("cal", nargs="*", help="iCal formatted files to collect events from")
    return parser


if __name__ == "__main__":
    parser = get_parser()
    args = vars(parser.parse_args())

    year = args["year"]

    print(f"Generation of calendar for {year}")

    pdf = initialize_document(year)
    links = generate_links(pdf)
    entries = collect_ical_events(year)

    add_month_pages(pdf, links, entries)

    time_block_line_width = args["linewidth"]
    time_block_line_color = args["linecolor"]

    for mon in range(1, 12 + 1):

        # month overview page
        pdf.add_page()
        pdf.set_link(links["%04d-%02d" % (year, mon)])

        insert_calendar(
            pdf,
            year,
            mon,
            -1,
            (PAGE_WIDTH - LEFT_MARGIN) / 7,
            LEFT_MARGIN,
            0,
            links,
            entries,
            day_font=12,
            border=True,
            include_year=True,
            ysize=36,
        )

        for day in range(1, 31 + 1):
            add_day_page(
                pdf,
                year,
                mon,
                day,
                links,
                time_block_line_width=time_block_line_width,
                time_block_line_color=time_block_line_color
            )

    output = args.get("output") or f"agenda-{year}.pdf"
    print(f"Writing {output}")
    pdf.output(output)

#!/usr/bin/env python3
from fpdf import FPDF
import datetime
import sys

font = 'dejavu'
year = 2025

# close to a4 sizes in mm, but matching the remarkable 2
w = 210
h = 280

# clear the remarkable tool bar
left_margin = 20

pdf = FPDF(
	orientation='portrait',
	unit='mm',
	format=(w,h),
)
pdf.set_margins(0,0)
pdf.set_auto_page_break(False)
pdf.add_font(font, '', fname='fonts/DejaVuSansCondensed.ttf')
pdf.add_font(font, 'B', fname='fonts/DejaVuSansCondensed-Bold.ttf')
#pdf.add_font('DejaVu', 'B', 'DejaVuSans-Bold.ttf', uni=True)
#pdf.set_font('DejaVu', '', 14)

links = {}
days = [ "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" ]
fulldays = [ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" ]
months = [ "None", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ]

# read events to populate in the calendar from a csv file
entries = {}

for filename in sys.argv[1:]:
	with open(filename, "r") as f:
		while line := f.readline():
			[ymd,hms,dur,title] = line.split(",",3)

			if ymd not in entries:
				entries[ymd] = {}
			if hms not in entries[ymd]:
				entries[ymd][hms] = []
			entries[ymd][hms].append([int(dur),title.strip()])
	

def add_calendar(
	pdf,
	year,
	mon,
	highlight,
	size,
	x,
	y,
	day_font = None,
	border=False,
	include_year = False, # true == full page overview of the month
	ysize = None,
):
	if not ysize:
		ysize = size
	if not day_font:
		day_font = size * 1.8

	pdf.set_font(font, 'B', 2*size)
	pdf.set_text_color(255)
	pdf.set_fill_color(40)

	if include_year:
		header = "%s %04d" % (months[mon], year)
		link = links["%04d" % (year)]
	else:
		header = months[mon]
		link = links["%04d-%02d" % (year,mon)]

	pdf.set_xy(x,y)
	pdf.cell(
		w = 7 * size,
		h = 1.5 * size,
		text = header,
		align = 'C',
		fill = True,
		link = link
	)
	y += size * 1.5

	# draw the days of the week above the table
	pdf.set_fill_color(180)
	pdf.set_font(font, '', size)
	for weekday in range(0,7):
		pdf.set_xy(x + weekday * size, y)
		pdf.cell(
			h = size * 0.5,
			w = size,
			text = days[weekday],
			fill = True,
			align = 'C',
		)

	week = 0
	y += size * 0.5
		
	# draw the table for days of the month
	pdf.set_text_color(0)

	for day in range(1,31+1):
		try:
			date = datetime.date(year, mon, day)
		except Exception as e:
			continue

		weekday = date.weekday()
		ymd = "%04d-%02d-%02d" % (year,mon,day)
		link = links[ymd]

		if weekday == 0 and day != 1:
			week += 1

		day_x = x + weekday * size
		day_y = y + week * ysize

		if border:
			pdf.rect(day_x, day_y, size, ysize)
		if day == highlight:
			pdf.rect(day_x, day_y, size, ysize, style="F")

		pdf.set_xy(day_x, day_y)
		pdf.set_font(font, '', day_font)
		pdf.cell(
			w = size,
			h = day_font/2 + 1.5,
			text = "%d" % (day),
			align = 'R',
			link = link,
			#fill = day == highlight,
			#border = border,
		)

		if not border:
			continue
		if not (events := entries.get(ymd)):
			continue

		pdf.set_font(font, '', day_font*0.8)
		for hms,evs in sorted(events.items()):
			for ev in evs:
				if hms != "00:00" or ev[0] != 0:
					# not an all day event
					continue
				pdf.set_xy(day_x+1, day_y + day_font/2 + 2)
				pdf.multi_cell(
					w = size,
					h = day_font/3,
					text = ev[1],
					align = "L",
				)
	
	

def add_day(pdf, year, mon, day):
	try:
		date = datetime.date(year, mon, day)
	except Exception as e:
		return

	ymd = "%04d-%02d-%02d" % (year,mon,day)
	pdf.add_page()
	pdf.set_link(links[ymd])

	start_h = 8
	cal_size = 8
	date_y = 0
	cal_w = 7 * cal_size
	cal_h = 8 * cal_size
	cal_y = 50
	cal_x = w - cal_w - 4

	add_calendar(pdf, year, mon, day, cal_size, cal_x, cal_y, include_year=True, ysize=cal_size-0.0)

	if mon > 1:
		add_calendar(pdf, year, mon - 1, -1, cal_size*0.5, cal_x, cal_y + cal_h)
	if mon < 12:
		add_calendar(pdf, year, mon + 1, -1, cal_size*0.5, cal_x + cal_w/2, cal_y + cal_h)

	# big date and day of week
	pdf.set_font(font, 'B', 125)
	pdf.set_xy(cal_x, date_y + 8)
	pdf.cell(
		text = "%d" % (day),
		align="C",
		w = cal_w,
		h = 50,
		link = links["%04d-%02d" % (year, mon)],
	)

	pdf.set_font(font, 'B', 26)
	pdf.set_xy(cal_x, date_y)
	pdf.cell(
		text = fulldays[date.weekday()],
		w = cal_w,
		h = 15,
		align = "C",
		link = links["%04d" % (year)],
	)

	# add the time blocks
	pdf.set_draw_color(200)
	pdf.set_line_width(0)
	pdf.set_fill_color(240)
	pdf.set_text_color(40)
	pdf.set_font(font, 'B', 16)

	hour_h = h / 30
	for i in range(1,30):
		line_y = i * hour_h
		#if i < 7:
		line_x = cal_x - 8
		#else:
		#	line_x = w * 0.6 - 2.5
		pdf.line(left_margin, line_y, line_x, line_y)

		if i % 2 != 0:
			continue
		pdf.set_xy(left_margin, line_y-0)
		pdf.cell(
			w=hour_h,
			h=hour_h,
			text="%02d" % (i//2 + start_h),
			align="C",
		)
		pdf.rect(left_margin, line_y, hour_h, hour_h)

	# add the todo blocks
	todo_h = hour_h + 1.5
	for i in range(0,13):
		line_y = i * todo_h + cal_y + cal_h * 1.5 + todo_h
		line_x = cal_x - 4
		pdf.line(line_x, line_y, w, line_y)
		pdf.rect(line_x, line_y-todo_h/2, todo_h/2, todo_h/2)

	# add prepopulated entries if there are any
	if not (events := entries.get(ymd)):
		return

	for hms,evs in sorted(events.items()):
		for ev in evs:
			if hms == "00:00" and ev[0] == 0:
				# this is an all day event
				#print("adding", ev)
				pdf.set_font(font, 'B', 16)
				pdf.set_xy(left_margin, 0)
				pdf.cell(
					w = line_x - left_margin,
					h = hour_h,
					text = ev[1],
					align = "C",
				)
				continue
			# time bounded; if it is less than the earliest time,
			# draw it at the start time.
			ev_h,ev_m = [int(_) for _ in hms.split(":")]

			if ev_h < start_h:
				ev_h = start_h
				ev_m = 0
			if ev_h > start_h + 15:
				ev_h = start_h + 15
				ev_m = 0

			ev_x = left_margin + hour_h + 5
			ev_y = hour_h * (ev_h * 2 + ev_m / 30 - start_h*2)
			ev_h = (ev[0]/1800) * hour_h

			pdf.rect(
				ev_x, ev_y,
				line_x - ev_x - 10, ev_h,
				style = "F",
			)

			pdf.set_xy(ev_x, ev_y)
			pdf.set_font(font, '', 10)
			pdf.multi_cell(
				w = line_x - ev_x - 10,
				h = 10/2,
				align = "L",
				text = hms + ": " + ev[1]
			)
				
	
	
	
		

# Create the title page
pdf.add_page()

# Create internal links for every day of the year as well as month pages
# (must happen after the title page is created)
links["%04d" % (year)] = pdf.add_link()
for mon in range(1,12+1):
	# month overview page
	links["%04d-%02d" % (year, mon)] = pdf.add_link()

	for day in range(1,31+1):
		links["%04d-%02d-%02d" % (year,mon,day)] = pdf.add_link()

pdf.set_font(font, 'B', 40)
pdf.set_xy(0, 0)
pdf.cell(text="%04d" % (year), align='C', w=w, h=20)
pdf.set_link(links["%04d" % (year)])

for mon in range(0,12):
	xsize = 9 * 7
	ysize = 9 * 7
	add_calendar(
		pdf,
		year,
		mon + 1,
		-1,
		8,
		(mon % 3) * xsize + left_margin,
		(mon // 3) * ysize + 20,
		ysize = 8,
	)

# Now create all of the month and day
for mon in range(1,12+1):
#for mon in range(1,4):
	# month overview page
	pdf.add_page()
	pdf.set_link(links["%04d-%02d" % (year, mon)])

	add_calendar(
		pdf,
		year,
		mon,
		-1,
		(w - left_margin) / 7,
		left_margin,
		0,
		day_font=12,
		border=True,
		include_year=True,
		ysize=36
	)

	for day in range(1,31+1):
		add_day(pdf, year, mon, day)

pdf.output('agenda-%04d.pdf' % (year))

